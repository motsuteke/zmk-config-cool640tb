// #define ZMK_POINTING_DEFAULT_MOVE_VAL 800 
// #define ZMK_POINTING_DEFAULT_SCRL_VAL 120

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

// #include <dt-bindings/zmk/pointing.h>

#define MOUSE 4
#define SCROLL 5
#define NUM 6

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

/ {
    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp ESCAPE>;
            key-positions = <0 1>;
            layers = <0>;
        };

        shift_tab {
            bindings = <&kp TAB>;
            key-positions = <10 11>;
            require-prior-idle-ms = <0>;
            layers = <0>;
        };

        double_quotation {
            bindings = <&kp CAPS>;
            key-positions = <20 21>;
            layers = <0>;
        };

        eq {
            bindings = <&bt BT_CLR_ALL>;
            key-positions = <8 9>;
            layers = <2>;
        };

        BS {
            bindings = <&kp BACKSPACE>;
            key-positions = <8 9>;
            layers = <0>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q                    &kp W         &kp E  &kp R        &kp T  &kp Y              &kp U  &kp I          &kp O          &kp P
&kp A                    &kp S         &kp D  &kp F        &kp G  &kp H              &kp J  &kp K          &kp L          &kp SEMICOLON
&kp Z                    &kp X         &kp C  &kp V        &kp B  &kp N              &kp M  &kp COMMA      &kp PERIOD     &kp SLASH
&kp LANG_ZENKAKUHANKAKU  &kp LEFT_GUI  &mo 3  &lt 1 SPACE  &mo 2  &lt 2 RIGHT_SHIFT  &mo 1  &kp LC(RCTRL)  &kp RC(LCTRL)  &kp RG(LANG_HIRAGANA)
            >;
        };

        FUNCTION {
            bindings = <
&none  &none           &kp UP_ARROW  &none      &none  &none          &none  &none  &none  &kp DELETE
&none  &kp LEFT_ARROW  &kp DOWN      &kp RIGHT  &none  &kp BACKSPACE  &none  &none  &none  &none
&none  &none           &none         &none      &none  &none          &none  &none  &none  &none
&none  &none           &none         &kp ENTER  &none  &none          &none  &none  &none  &none
            >;
        };

        NUM {
            bindings = <
&kp F1       &kp F2   &kp F3             &kp F4         &kp F5          &kp F6         &kp F7          &kp F8          &kp F9           &kp F10
&kp AT_SIGN  &kp SQT  &kp DOUBLE_QUOTES  &kp SEMICOLON  &kp COLON       &kp LEFT       &kp DOWN_ARROW  &kp UP_ARROW    &kp RIGHT        &kp ENTER
&kp Z        &kp X    &kp C              &kp V          &kp B           &kp LC(SPACE)  &kp RG(SPACE)   &kp LEFT_BRACE  &kp RIGHT_BRACE  &kp SLASH
&kp N1       &kp N2   &kp LEFT_CONTROL   &kp LEFT_GUI   &kp UNDERSCORE  &none          &kp LEFT_ALT    &kp BACKSPACE   &kp N3           &mo 4
            >;
        };

        ARROW {
            bindings = <
&bt BT_SEL 0  &bt BT_SEL 1    &bt BT_SEL 2      &kp R         &kp T            &kp Y     &kp U         &kp I      &kp O       &kp P
&kp A         &mmv MOVE_LEFT  &mmv MOVE_DOWN    &mmv MOVE_UP  &mmv MOVE_RIGHT  &kp H     &kp J         &kp K      &kp L       &kp ENTER
&kp Z         &kp X           &kp C             &kp V         &kp B            &kp N     &kp M         &kp COMMA  &kp PERIOD  &kp LEFT_SHIFT
&kp N1        &kp N2          &kp LEFT_CONTROL  &kp LEFT_GUI  &mkp MB1         &mkp MB2  &kp LEFT_ALT  &to 0      &kp N3      &kp N4
            >;
        };

        MOUSE {
            bindings = <
&kp Q   &kp W   &kp E             &kp R         &kp T     &kp Y     &kp U         &kp I          &kp O       &kp P
&kp A   &kp S   &kp D             &kp F         &kp G     &kp H     &kp J         &kp K          &kp L       &kp ENTER
&kp Z   &kp X   &kp C             &kp V         &kp B     &kp N     &kp M         &kp COMMA      &kp PERIOD  &kp LEFT_SHIFT
&kp N1  &kp N2  &kp LEFT_CONTROL  &kp LEFT_GUI  &mkp MB1  &mkp MB2  &kp LEFT_ALT  &kp BACKSPACE  &kp N3      &mo 0
            >;
        };

        SCROLL {
            bindings = <
&kp Q   &kp W   &kp E             &kp R         &kp T        &kp Y        &kp U         &kp I          &kp O       &kp P
&kp A   &kp S   &kp D             &kp F         &kp G        &kp H        &kp J         &kp K          &kp L       &kp ENTER
&kp Z   &kp X   &kp C             &kp V         &kp B        &kp N        &kp M         &kp COMMA      &kp PERIOD  &kp LEFT_SHIFT
&kp N1  &kp N2  &kp LEFT_CONTROL  &kp LEFT_GUI  &lt 1 SPACE  &lt 2 SPACE  &kp LEFT_ALT  &kp BACKSPACE  &kp N3      &kp N4
            >;
        };

        layer_6 {
            bindings = <
&kp Q   &kp W   &kp E             &kp R         &kp T        &kp Y        &kp U         &kp I          &kp O       &kp P
&kp A   &kp S   &kp D             &kp F         &kp G        &kp H        &kp J         &kp K          &kp L       &kp ENTER
&kp Z   &kp X   &kp C             &kp V         &kp B        &kp N        &kp M         &kp COMMA      &kp PERIOD  &kp LEFT_SHIFT
&kp N1  &kp N2  &kp LEFT_CONTROL  &kp LEFT_GUI  &lt 1 SPACE  &lt 2 SPACE  &kp LEFT_ALT  &kp BACKSPACE  &kp N3      &kp N4
            >;
        };
    };
};
