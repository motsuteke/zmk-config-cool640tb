// #define ZMK_POINTING_DEFAULT_MOVE_VAL 800 
// #define ZMK_POINTING_DEFAULT_SCRL_VAL 120

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

// #include <dt-bindings/zmk/pointing.h>

#define MOUSE 4
#define SCROLL 5
#define NUM 6

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

/ {
    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <0 1>;
            layers = <0>;
        };

        minus {
            bindings = <&kp MINUS>;
            key-positions = <8 9>;
            layers = <0>;
        };

        esc {
            bindings = <&kp ESCAPE>;
            key-positions = <0 1 2>;
            layers = <0>;
        };

        colon {
            bindings = <&kp LS(SEMICOLON)>;
            key-positions = <19 18>;
            layers = <0>;
        };

        scroll {
            bindings = <&msc MOVE_Y(0)>;
            key-positions = <35 34>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };
    };

    behaviors {
        a_tap_dance: new_behavior {
            compatible = "zmk,behavior-tap-dance";
            label = "a_tap_dance";
            #binding-cells = <0>;
            bindings = <&kp A>, <&mt LEFT_CONTROL LC(A)>;

            tapping-term-ms = <200>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q         &kp W         &kp E      &kp R        &kp T      &kp Y      &kp U  &kp I           &kp O              &kp P
&a_tap_dance  &kp S         &kp D      &kp F        &kp G      &kp H      &kp J  &kp K           &kp L              &kp SEMICOLON
&kp Z         &kp X         &kp C      &kp V        &kp B      &kp N      &kp M  &kp COMMA       &kp PERIOD         &kp SLASH
&kp LANG2     &kp LEFT_GUI  &kp RCTRL  &lt 2 SPACE  &mkp LCLK  &mkp RCLK  &mo 1  &kp LEFT_SHIFT  &kp RC(RIGHT_ALT)  &kp RG(LANG_HIRAGANA)
            >;
        };

        num_arrow {
            bindings = <
&kp DELETE  &none           &kp UP_ARROW  &none            &none            &none          &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &kp SLASH
&none       &kp LEFT_ARROW  &kp DOWN      &kp RIGHT        &none            &kp BACKSPACE  &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6  &kp ASTRK
&none       &none           &none         &msc MOVE_Y(-5)  &msc MOVE_X(-5)  &mkp MB1       &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp MINUS
&none       &none           &none         &kp ENTER        &none            &mkp MB2       &mkp MB3      &kp N0        &kp PERIOD    &kp PLUS
            >;
        };

        symbols {
            bindings = <
&kp EXCLAMATION  &kp DOUBLE_QUOTES  &kp HASH  &kp DOLLAR  &kp PERCENT  &kp AMPERSAND  &kp SQT  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp TILDE
&kp AT_SIGN      &none              &none     &none       &none        &none          &none    &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &kp LC(PIPE)
&none            &none              &none     &none       &none        &none          &none    &none                 &none                  &kp UNDERSCORE
&none            &none              &none     &none       &none        &none          &none    &none                 &none                  &none
            >;
        };

        ARROW {
            bindings = <
&none    &kp F2   &kp F3  &kp F4  &kp F5     &kp F6     &kp F7  &kp F8        &kp F9        &kp F10
&kp F1   &kp F12  &none   &none   &none      &none      &none   &none         &none         &none
&kp F11  &none    &none   &none   &none      &none      &none   &none         &none         &none
&none    &none    &none   &none   &mkp LCLK  &mkp RCLK  &none   &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2
            >;
        };

        MOUSE {
            bindings = <
&kp Q   &kp W   &kp E             &kp R         &kp T      &kp Y      &kp U         &kp I          &kp O       &kp P
&kp A   &kp S   &kp D             &kp F         &kp G      &kp H      &kp J         &kp K          &kp L       &kp ENTER
&kp Z   &kp X   &kp C             &kp V         &kp B      &kp N      &kp M         &kp COMMA      &kp PERIOD  &kp LEFT_SHIFT
&kp N1  &kp N2  &kp LEFT_CONTROL  &kp LEFT_GUI  &mkp LCLK  &mkp RCLK  &kp LEFT_ALT  &kp BACKSPACE  &kp N3      &mo 0
            >;
        };

        SCROLL {
            bindings = <
&kp Q   &kp W   &kp E             &kp R         &kp T        &kp Y        &kp U         &kp I          &kp O       &kp P
&kp A   &kp S   &kp D             &kp F         &kp G        &kp H        &kp J         &kp K          &kp L       &kp ENTER
&kp Z   &kp X   &kp C             &kp V         &kp B        &kp N        &kp M         &kp COMMA      &kp PERIOD  &kp LEFT_SHIFT
&kp N1  &kp N2  &kp LEFT_CONTROL  &kp LEFT_GUI  &lt 1 SPACE  &lt 2 SPACE  &kp LEFT_ALT  &kp BACKSPACE  &kp N3      &kp N4
            >;
        };

        layer_6 {
            bindings = <
&kp Q   &kp W   &kp E             &kp R         &kp T        &kp Y        &kp U         &kp I          &kp O       &kp P
&kp A   &kp S   &kp D             &kp F         &kp G        &kp H        &kp J         &kp K          &kp L       &kp ENTER
&kp Z   &kp X   &kp C             &kp V         &kp B        &kp N        &kp M         &kp COMMA      &kp PERIOD  &kp LEFT_SHIFT
&kp N1  &kp N2  &kp LEFT_CONTROL  &kp LEFT_GUI  &lt 1 SPACE  &lt 2 SPACE  &kp LEFT_ALT  &kp BACKSPACE  &kp N3      &kp N4
            >;
        };
    };
};
